rm(list=ls())
library(openxlsx)
setwd("/Users/andrew/Dropbox/Papers/2-step\ online\ trade_empirics/Data")

J <- 0
model_link <- vector()
model_prices_link <- vector()
model_id <- vector()

start_time <- Sys.time()
### 1. Getting number of pages of all products in the category
#The first page of the calegory products has an information about total number of pages

#getting link to page with first 20 products of category
page_source <- toString(readLines(con = "http://www.e-katalog.ru/list/122/"))
Sys.time() - start_time
#identifiing position of number_of_pages
number_of_pages_start_index <- gregexpr("class='ib' id=",page_source)[[1]]+21
#getting total number of pages in category
n_pages <- as.integer(gsub("\\D","",substr(page_source,number_of_pages_start_index[6],number_of_pages_start_index[6]+2)))

print(difftime(Sys.time(), start_time, units = c("secs")))
### 2. Going over all pages consequently and getting links to products' pages

#i is product list page number

for(i in 0:n_pages){
  #getting page source code for i-th page of category catalog
  page_source <- toString(readLines(con = paste("http://www.e-katalog.ru/list/122/",i, sep="")))
  
  #getting positions of the products' links on the page
  start_index <- gregexpr("htm'  data-url=",page_source)[[1]]+16
  stop_index <- gregexpr(".htm' class='model-short-title", page_source)[[1]]+3
  
  start_index_productid <- gregexpr("id='product_",page_source)[[1]]+12
  
  #number of goods on the page
  n <- length(start_index)
  
  #Going over all products on the page consequently and getting links to products' prices page
  #j \in 1:24 -- index number of good on the page
  
  for(j in 1:n){
    #getting link to the model card
    model_link[J+j] <- paste("http://www.e-katalog.ru",substr(page_source,start_index[j],stop_index[j]),sep = "")
    
    #getting link to the product prices list (and also bids and position list is on the same page source code)
    model_prices_link[J+j] <- paste("http://www.e-katalog.ru/mtools/dot_output/mui_item_wherebuy.php?idg_=",gsub("\\D","",substr(page_source,start_index_productid[j],start_index_productid[j]+7)),"&view_=dsc&p_start_=1&p_end_=10000",sep="")
    
    #getting product id on the site
    model_id[J+j] <- as.integer(gsub("\\D","",substr(page_source,start_index_productid[j],start_index_productid[j]+7)))
  }
  
  start_index_additional <- gregexpr("class='ib ' title='",page_source)[[1]]+19
  start_index_productid_additional <- gregexpr("http://www.e-katalog.ru/mtools/dot_output/mui_item_in_list.php?",page_source)[[1]]+68
  
  k <- length(start_index_additional)*(start_index_additional[1]!=18)
  
  if(start_index_additional[1]!=18){
    for(j in 1:k){
      sub_string <- substr(page_source,start_index_additional[j],start_index_additional[j]+100)
      sub_string_start_index <- regexpr('<a href=',substr(page_source,start_index_additional[j],start_index_additional[j]+100))[1]+9
      sub_string_stop_index <- regexpr("' jtype='click'",substr(page_source,start_index_additional[j],start_index_additional[j]+100))[1]-1
      model_link[J+n+j] <- paste("http://www.e-katalog.ru",substr(sub_string,sub_string_start_index,sub_string_stop_index),sep = "")
      
      model_prices_link[J+n+j] <- paste("http://www.e-katalog.ru/mtools/dot_output/mui_item_wherebuy.php?idg_=",gsub("\\D","",substr(page_source,start_index_productid_additional[j],start_index_productid_additional[j]+7)),"&view_=dsc&p_start_=1&p_end_=10000",sep="")
      
      model_id[J+n+j] <- as.integer(gsub("\\D","",substr(page_source,start_index_productid_additional[j]-1,start_index_productid_additional[j]+10)))
    }
  }
  
  J <- J+n+k
  print(difftime(Sys.time(), start_time, units = c("secs")))
  print(J)
}


#####################################
#### Логика как собирать данные со страниц с ценами на отдельные товары

### Здесь я получаю строку типа 4,1,134,0.15,183 с основными данными.
start_time <- Sys.time()

data <- array(NA, c(10000,length(model_id),3), 
           dimnames=list(shop=rep(NA,10000),model=model_id,slice=list("bid","position","price")))

start_time <- Sys.time()
for(i in 1:length(model_id)){
  page_source <- toString(readLines(con = model_prices_link[i]))
  start_index<- gregexpr("&ids_=",page_source)[[1]]+6
  start_index<- start_index[seq(1, length(start_index), 4)]
  start_index_price <- gregexpr('<b>&nbsp;р.',page_source)[[1]]-15
  
  bid <- NA
  if(start_index!=5){
    for(j in 1:length(start_index)){
      str <- substr(page_source,start_index[j],start_index[j]+30)
      shop_id <- gsub("&.*","",str)
      
      data_line <- gsub("\\\\.*","",gsub(".*=","",str))
      data_line_index <- gregexpr(",",data_line)[[1]]
      
      #adding shop to the array rows if it is not there yet
      n_of_shops_in_list_now <- length(unique(dimnames(data)$shop))
      if(!(shop_id %in% dimnames(data)$shop)){
        dimnames(data)$shop[n_of_shops_in_list_now+1] <- as.integer(shop_id)
      }
      
      position <- as.integer(substr(data_line,gregexpr(",",data_line)[[1]][2]+1,gregexpr(",",data_line)[[1]][3]-1))
      shop_bid <- bid #bid is a shop_bid from the previous j. In source code to every shop assigned what it pays, not what it bids.
      bid <- as.double(substr(data_line,gregexpr(",",data_line)[[1]][3]+1,gregexpr(",",data_line)[[1]][4]-1))
      price <- as.integer(gsub("\\D","",substr(page_source,start_index_price[j],start_index_price[j]+20)))
      
      #write shop-model specific data into database
      if(is.na(data[shop_id,as.character(model_id[i]),3])){
        data[shop_id,as.character(model_id[i]),] <- c(shop_bid, position,price)
      }
    }
  }
    cat(round(difftime(Sys.time(), start_time, units = c("secs")),2),"secs, i =",as.integer(i),"\n")
}

### Удаляю NaN из списка магазинов
data <- data[!is.na(dimnames(data)$shop),,]

### Сохранение данных в видe трехмерного массива (shop,model,(bid,position,price)).
save(data, file = paste0(format(Sys.time(), "%Y %b %d %H-%M-%S"),".RData"))

### Сохранение названия моделей чтобы потом можно было получить для них веса.
#write.xlsx(matrix(data=c(model_id,paste0(gsub("...GB","",gsub("-"," ",gsub(".htm","",substr(model_link,25,100))))," купить")),ncol=2), file = paste0(format(Sys.time(), "%Y %b %d %H-%M-%S")," models.xlsx"), sheetName="Sheet1", col.names=TRUE, row.names=FALSE, append=FALSE, showNA=TRUE)
write.table(matrix(data=c(model_id,paste0(gsub("...GB","",gsub("-"," ",gsub(".htm","",substr(model_link,25,100))))," купить")),ncol=2), file = paste0(format(Sys.time(), "%Y %b %d %H-%M-%S")," models.xlsx"), col.names=F, row.names=F, append=FALSE)


